!> This is a comment
!> This is in a file named main.ya

yay is_negative(x):
    !> This is a function!
    x < 0 ?     !> If x is less than 0
        yes     !> Return true
    ?? no       !> Else, return false

!> YES/ Yes/ yES/ True/ TRUE/ true/ TrU / TRU are all equivalent

x = 2  !> This is a function that returns 2
y = 3
y = x * x

print("is 4 negative?", is_negative(4))

yay sum(start, end):

    yay recursion(current, total):
        current >= end ? total
        ?? recursion(current + 1, current + total)

    recursion(start, 0)


print(sum(1, 10)) !> prints 45

x = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
print(x * 2) !> prints [[2, 4, 6], [8, 10, 12], [14, 16, 18]]

l = Linear(2, 1) >> Sigmoid() >> Linear(1, 2) >> Sigmoid()

print(l([1, 2]))        !> [whatever,] is an array
print({2, 3, 4, 5, 6})  !> {whatever,} is is a group

nn = Linear(2, 4) >>
    Sigmoid() >>
    Linear(4, 3) >>
    Sigmoid() >>
    Linear(3, 1) >>
Sigmoid()

!> Both 'l' and 'nn' are neural networks.

nn([1, 0])

in = [
    [[10, 10]], [[10, 10]],
    [[10, 0]],  [[10, 0]],
    [[0, 10]],  [[0, 10]],
    [[0, 0]],   [[0, 0]]
]
!>in = [
!>    [[[10, 10], [10, 0], [0, 10], [0, 0]]]
!>]
out = [
    [[0]], [[0]],
    [[1]], [[1]],
    [[1]], [[1]],
    [[0]], [[0]]
]
!>out = [
!>    [[[0], [1], [1], [0]]]
!>]

!>we use [[10, 10]] instead of the more intuitive [10, 10]
!>because each Operand receives a list of arguments.
!>Activation functions and Linear Transformations have arity 1,
!>which means that they expect a single argument. and they expect
!>that argument to be a vector, and thus we arrive at [[10, 10]].

print("BEFORE TRAINING", nn([10, 10]), nn([10, 0]), nn([0, 0]), nn([0, 10]))

train(nn, in, out) !> This function is built-in, just like 'print'

print("AFTER TRAINING", nn([10, 10]), nn([10, 0]), nn([0, 0]), nn([0, 10]))

yay while_loop(max, body):
    print("WHILE LOOP CALLED")
    state = 0

    while:
        state < max ?
            body(state)
            state = state + 1
            jmp while
        jmp outside


body = (i) => print(i)

while_loop(3, body)  !> Will print "0.0", "1.0", "2.0" and then "Hello from outside label!"

outside:
    print("Hello from outside label!")

i = 0
sum = 0

while:
    i < 4 ?
        sum = sum + i ^ 2
        i = i + 1
        jmp while
print(sum)  !> Prints 144.0



!> This file, when interpreted, will return a function.
!> This function, when called, will return 3.
_ = 3
